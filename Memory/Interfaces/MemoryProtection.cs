// COPYRIGHT (C) HARRY CLARK 2025
// .NET IMPLEMENTATION OF MEMORY HOOKS AND MANAGEMENT

// THE FOLLOWING PERTAINS TOWARDS THE BASE OF MEMORY ALLOCATION
// AND THE MODULARISATION ENCOMPASSING THE LOGIC BEHIND IT

// THIS FILE MORESO ENCOMPASSES THE SAFE DISPOSABLE OF UNWARRANTED MEMORY ACCESSES
// IN LOCATIONS BY WHICH THEY ARE OUT OF BOUNDS - PROVIDING A SAFE MEANS OF DEALLOC

using revoMem.Memory.Structs;

namespace revoMem.Memory.Interfaces;

public interface MemoryProtection
{
    uint CHANGE_PROTECTION_LAYER(uint MEM_ADDRESS, int SIZE, uint NEW_LEVEL);
}

[Flags]
public enum PROTECTION_LAYERS
{
    READ = 1 << 0,
    WRITE = 1 << 1,
    EXECUTE = 1 << 2,
    ALL = READ | WRITE | EXECUTE
}