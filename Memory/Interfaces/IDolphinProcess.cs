// COPYRIGHT (C) HARRY CLARK 2025
// DOCUMENTATION RESEARCH ON WORKING WITH MARIO KART WII'S MEMORY

// THIS FILE PERTAINS TOWARDS THE LOGIC ENCOMPASSING MY TAKE ON THE PROCESS MEMORY
// IN TURN, THIS WILL ALLOW FOR FULL MODULAR CONTROL IN HOOKING MEMORY MORE EFFICIENTLY
// BASED ON EVENTS

using revoMem.Memory.Structs;

namespace revoMem.Memory.Interfaces;

public interface IDolphinProcess : IDisposable
{
    /// <SUMMARY>
    /// ATTEMPTS TO FIND THE PROCESS ID (PID) OF THE INSTANCE
    /// </SUMMARY>
    /// <RETURNS>TRUE IF THE PID WAS SUCCESSFULLY FOUND, FALSE OTHERWISE</RETURNS>
    bool FIND_PID();

    /// <SUMMARY>
    /// OBTAINS INFORMATION ABOUT THE EMULATED RAM REGIONS (MEM1, MEM2, ARAM)
    /// </SUMMARY>
    /// <RETURNS>TRUE IF THE RAM INFORMATION WAS SUCCESSFULLY OBTAINED, FALSE OTHERWISE</RETURNS>
    bool OBTAIN_EMU_RAM_INFO();

    /// <SUMMARY>
    /// READS DATA FROM THE EMULATOR'S RAM AT THE SPECIFIED OFFSET
    /// </SUMMARY>
    /// <PARAM NAME="OFFSET">THE MEMORY OFFSET TO READ FROM</PARAM>
    /// <PARAM NAME="BUFFER">THE BUFFER TO STORE THE READ DATA</PARAM>
    /// <PARAM NAME="SIZE">THE NUMBER OF BYTES TO READ</PARAM>
    /// <PARAM NAME="WITH_BSWAP">WHETHER TO PERFORM BYTE SWAPPING DURING THE READ</PARAM>
    /// <RETURNS>TRUE IF THE READ OPERATION WAS SUCCESSFUL, FALSE OTHERWISE</RETURNS>
    bool READ_FROM_RAM(uint OFFSET, byte[] BUFFER, int SIZE, bool WITH_BSWAP);

    /// <SUMMARY>
    /// WRITES DATA TO THE EMULATED RAM AT THE SPECIFIED OFFSET
    /// </SUMMARY>
    /// <PARAM NAME="OFFSET">THE MEMORY OFFSET TO WRITE TO</PARAM>
    /// <PARAM NAME="BUFFER">THE DATA TO WRITE</PARAM>
    /// <PARAM NAME="SIZE">THE NUMBER OF BYTES TO WRITE</PARAM>
    /// <PARAM NAME="WITH_BSWAP">WHETHER TO PERFORM BYTE SWAPPING DURING THE WRITE</PARAM>
    /// <RETURNS>TRUE IF THE WRITE OPERATION WAS SUCCESSFUL, FALSE OTHERWISE</RETURNS>
    bool WRITE_TO_RAM(uint OFFSET, byte[] BUFFER, int SIZE, bool WITH_BSWAP);

    /// <SUMMARY>
    /// GETS THE PROCESS ID
    /// </SUMMARY>
    int PID { get; }

    /// <SUMMARY>
    /// GETS THE STARTING ADDRESS OF THE EMULATED MEM1 RAM REGION
    /// </SUMMARY>
    ulong EMU_RAM_START { get; }

    /// <SUMMARY>
    /// GETS A VALUE INDICATING WHETHER THE MEM2 REGION IS PRESENT
    /// </SUMMARY>
    bool IS_MEM2_PRESENT { get; }

    /// <SUMMARY>
    /// GETS A VALUE INDICATING WHETHER ARAM IS ACCESSIBLE
    /// </SUMMARY>
    bool IS_ARAM_ACCESSIBLE { get; }

    /// <SUMMARY>
    /// GETS THE STARTING ADDRESS OF THE ARAM REGION
    /// </SUMMARY>
    ulong ARAM_START { get; }

    /// <SUMMARY>
    /// GETS THE STARTING ADDRESS OF THE MEM2 REGION
    /// </SUMMARY>
    ulong MEM2_START { get; }

    /// <SUMMARY>
    /// GETS THE DISTANCE BETWEEN MEM1 AND MEM2 REGIONS
    /// RETURNS 0 IF MEM2 IS NOT PRESENT
    /// </SUMMARY>
    ulong MEM1_TO_MEM2_DISTANCE { get; }
}